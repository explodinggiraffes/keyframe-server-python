from typing import Any

import ffmpeg


def group_of_pictures_frame_span(iframes, group_of_pictures_index, video_pathname) -> dict[int, int]:
    """Returns the start and end frames for the specified group-of-pictures.

    If the supplied index is for the last group-of-pictures, the number of frames for the entire video will be used as
    the end frame.

    Args:
      iframes: A list of I-Frame data that was returned by ffprobe.
      group_of_pictures_index: The index of the group-of-pictures for which we want the start and end frames.
      video_pathname: The pathname of the file used if we need to obtain the number of frames for the entire video.

    Raises:
      ffmpeg.Error
    """
    start_frame = iframes[group_of_pictures_index]['coded_picture_number']
    if group_of_pictures_index < (len(iframes) - 1):
        end_frame = iframes[group_of_pictures_index + 1]['coded_picture_number'] - 1
    else:
        ffprobe_frames_nbr_as_json = ffmpeg.probe(video_pathname, count_frames=None, show_entries="stream=nb_read_frames")
        streams = ffprobe_frames_nbr_as_json['streams']
        end_frame = streams[0]['nb_read_frames']

    frame_span = {
        'start_frame': start_frame,
        'end_frame': end_frame
    }

    return frame_span

def iframes(video_pathname) -> list[str: Any]:
    """Returns a list of I-Frame data generated by ffprobe for the specified video file.

    Args:
      video_pathname: The pathname of the file on which ffprobe will operate.

    Returns:
      A list of I-Frame data.

    Raises:
      ffmpeg.Error
    """
    ffprobe_all_frames = ffmpeg.probe(video_pathname, show_frames=None)
    iframes = [frame for frame in ffprobe_all_frames['frames'] if frame['pict_type'] == 'I']
    return iframes

def trim(video_pathname, output_pathname, start_frame, end_frame) -> None:
    """Trims the specified video file, using the supplied beginning and ending frame numbers. A new file is created,
    using the name of the supplied output file pathname.

    If a file with the supplied output pathname already exists it will be overwitten.

    Args:
      video_pathname: The pathname of the file on which ffprobe will operate.
      output_pathname: The new video file.
      start_frame: The first frame in the existing video that will be included in the new one.
      start_frame: The last frame in the existing video that will be included in the new one.

    Raises:
      ffmpeg.Error
    """
    (
        ffmpeg
        .input(video_pathname)
        .trim(start_frame=start_frame, end_frame=end_frame)
        .output(output_pathname)
        .overwrite_output()
        .run()
    )
